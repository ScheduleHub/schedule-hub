{"version":3,"sources":["components/CourseItem/index.jsx","utils/courses.js","welcome_page/index.jsx","index.jsx","res/icon.svg","res/calendar-step-1.png","res/calendar-step-2.png"],"names":["CourseItem","props","courseCode","keepable","keep","onDropClick","ListItem","ListItemText","primary","ListItemSecondaryAction","Hidden","xsUp","Tooltip","title","IconButton","aria-label","disabled","Lock","LockOpen","onClick","Close","getCourseCode","classInfo","subject","catalog_number","apiKey","theme","createMuiTheme","palette","main","blue","light","dark","WelcomePage","loadCourseInfo","courseNames","a","async","allUrl","map","str","split","sub","cata","Promise","all","url","axios","get","params","key","then","values","courseInfo","value","data","setState","parseCourses","rawCourses","classNumbers","match","x","substring","length","currentCourses","item","currentClasses","parseInt","showScheduleInvalidAlert","scheduleInvalidAlertShow","hideScheduleInvalidAlert","event","reason","showCourseUnavailAlert","courseUnavailAlertShow","hideCourseUnavailAlert","showModal","state","modalShow","error","hideModal","subjectBox","courseNumberBox","courseNumbers","dropCourse","newCurrentCourses","filter","newCourseInfo","render","loadSubjects","response","allSubjects","loadCourseNumbers","updateRawCourses","handleAddClick","meta","status","slice","push","handleViewScheduleClick","currentCoursesDict","_","keyBy","filteredCourseInfo","course","filtered","s","classes","some","date","is_closed","campus","isOnline","section","includes","class_number","uniqWith","b","associated_class","i","isEqual","grouped","dict","groupBy","groupedSectionList","forEach","courses_info","filtered_courses","other","primarySection","allowedComponents","component","allowedSections","classInfo2","isEmpty","concat","formatPostData","console","log","courseNumberBoxRef","React","createRef","this","ThemeProvider","Box","p","CssBaseline","Snackbar","open","onClose","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","severity","src","logo","alt","className","Grid","container","justify","spacing","xs","md","lg","Card","raised","CardHeader","CardContent","Typography","variant","Link","href","target","CardMedia","image","step1","step2","style","display","flexDirection","height","mb","TextField","multiline","required","fullWidth","rows","onChange","e","CardActions","width","Button","color","size","Modal","alignItems","justifyContent","BackdropComponent","Backdrop","BackdropProps","timeout","closeAfterTransition","Fade","in","Paper","outline","sm","List","overflowY","Autocomplete","id","options","renderInput","label","_event","toUpperCase","current","focus","getOptionLabel","option","inputRef","ml","Divider","Component","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0125eb82.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ListItem, ListItemText, ListItemSecondaryAction, IconButton, Tooltip, Hidden,\n} from '@material-ui/core';\nimport { Close, Lock, LockOpen } from '@material-ui/icons';\n\nfunction CourseItem(props) {\n  const {\n    courseCode, keepable, keep, onDropClick,\n  } = props;\n\n  return (\n    <ListItem>\n      <ListItemText primary={courseCode} />\n      <ListItemSecondaryAction>\n        {/* TODO: Keep toggle */}\n        <Hidden xsUp={!keepable}>\n          <Tooltip\n            title={keep\n              ? 'This course will be kept unchanged in the schedule.'\n              : 'This course is allowed to be changed'}\n          >\n            <span>\n              <IconButton aria-label=\"keep unchanged\" disabled={!keepable || true}>\n                {/* Remove || true when implementing keepable */}\n                {keep ? <Lock /> : <LockOpen />}\n              </IconButton>\n            </span>\n          </Tooltip>\n        </Hidden>\n        <Tooltip title=\"Drop this course\">\n          <IconButton aria-label=\"drop\" onClick={onDropClick}>\n            <Close />\n          </IconButton>\n        </Tooltip>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n}\n\nCourseItem.propTypes = {\n  courseCode: PropTypes.string.isRequired,\n  keepable: PropTypes.bool.isRequired,\n  keep: PropTypes.bool.isRequired,\n  onDropClick: PropTypes.func.isRequired,\n};\n\nexport default CourseItem;\n","import _ from 'lodash';\n\n/**\n * @typedef {{ courseCode: string, keepable: boolean, keep: boolean }} CurrentCourse\n */\n\n/**\n * @typedef {Object} ClassInfo\n * @property {string} subject\n * @property {number} catalog_number\n * @property {number} class_number\n * @property {number} associated_class\n * @property {string} section\n * @property {string} campus\n * @property {ClassTimeInfo[]} classes\n */\n\n/**\n * @typedef {Object} ClassTimeInfo\n * @property {ClassDate} date\n * @property {{building: string, room: string}} location\n * @property {string[]} instructors\n*/\n\n/**\n * @typedef {Object} ClassDate\n * @property {string} start_time\n * @property {string} end_time\n * @property {string} weekdays\n * @property {boolean} is_tba\n * @property {boolean} is_cancelled\n * @property {boolean} is_closed\n */\n\n/**\n * Determines whether two classes are associated.\n * @param {ClassInfo} classInfo1 the ClassInfo object to compare.\n * @param {ClassInfo} classInfo2 the other ClassInfo object to compare.\n */\nconst areAssociated = (classInfo1, classInfo2) => (\n  classInfo1.associated_class === classInfo2.associated_class\n);\n\n/**\n * Returns the course code of a class.\n * @param {ClassInfo} classInfo the ClassInfo object to get course code from.\n */\nconst getCourseCode = (classInfo) => `${classInfo.subject} ${classInfo.catalog_number}`;\n\n/**\n * Determines whether a class in online or not.\n * @param {ClassInfo} classInfo the ClassInfo object to check.\n */\nconst isOnline = (classInfo) => classInfo.campus === 'ONLN ONLINE';\n\n/**\n * Determines whether a class in closed or not.\n * @param {ClassInfo} classInfo the ClassInfo object to check.\n */\nconst isClosed = (classInfo) => classInfo.classes.some((value) => value.date.is_closed);\n\n/**\n * Formats data for use in back-end.\n * @param {CurrentCourse[]} currentCourses the list of current courses.\n * @param {number[]} currentClasses the list of current class numbers.\n * @param {ClassInfo[][]} courseInfo the courses information obtained from API.\n */\nconst formatPostData = (currentCourses, currentClasses, courseInfo) => {\n  const currentCoursesDict = _.keyBy(currentCourses, 'courseCode');\n\n  const filteredCourseInfo = courseInfo.map((course) => {\n    let filtered = course.filter((s) => !isClosed(s) && !isOnline(s));\n    const keepUnchanged = currentCoursesDict[getCourseCode(course[0])].keep;\n    if (keepUnchanged) {\n      filtered = filtered.filter((section) => currentClasses.includes(section.class_number));\n    }\n    const filteredSet = _.uniqWith(filtered, (a, b) => {\n      if (a.associated_class !== b.associated_class) {\n        return false;\n      }\n      if (a.section.slice(0, 3) !== b.section.slice(0, 3)) {\n        return false;\n      }\n      if (a.classes.length !== b.classes.length) {\n        return false;\n      }\n      for (let i = 0; i < a.classes.length; i += 1) {\n        if (!_.isEqual(a.classes[i].date, b.classes[i].date)) {\n          return false;\n        }\n      }\n      return true;\n    });\n    return filteredSet;\n  });\n\n  const grouped = filteredCourseInfo.map((course) => {\n    const dict = _.groupBy(course, (s) => s.section[4]);\n    const groupedSectionList = [];\n    _.forEach(dict, (value, key) => {\n      groupedSectionList[key] = value;\n    });\n    return groupedSectionList;\n  });\n\n  const associatedClassList = grouped.map((course) => {\n    const primary = course[0];\n    const other = course.slice(1);\n    const rearranged = primary.map((primarySection) => {\n      const allowedComponents = other.map((component) => {\n        let allowedSections = component.filter(\n          (section) => areAssociated(primarySection, section),\n        );\n        if (_.isEmpty(allowedSections)) {\n          allowedSections = component.filter((section) => section.associated_class === 99);\n        }\n        return _.map(allowedSections, 'class_number');\n      });\n      return [[primarySection.class_number]].concat(allowedComponents);\n    });\n    return rearranged;\n  });\n\n  return {\n    courses_info: filteredCourseInfo,\n    filtered_courses: associatedClassList,\n  };\n};\n\nexport {\n  areAssociated,\n  getCourseCode,\n  formatPostData,\n};\n","import React from 'react';\nimport {\n  Button, TextField, Typography, Grid, Modal, Link, List,\n  Card, CardContent, CardHeader, CardMedia, CardActions,\n  Paper, CssBaseline, Divider, Snackbar, Fade, Backdrop, createMuiTheme, ThemeProvider, Box,\n} from '@material-ui/core';\nimport { Autocomplete, Alert } from '@material-ui/lab';\nimport { blue } from '@material-ui/core/colors';\nimport axios from 'axios';\nimport CourseItem from 'components/CourseItem';\nimport './index.css';\nimport { getCourseCode, formatPostData } from 'utils/courses';\nimport logo from 'res/icon.svg';\nimport step1 from 'res/calendar-step-1.png';\nimport step2 from 'res/calendar-step-2.png';\n\nconst apiKey = '4ad350333dc3859b91bcf443d14e4bf0';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: blue[500],\n      light: '#6ec6ff',\n      dark: '#0069c0',\n    },\n  },\n});\n\n// const useStyles = makeStyles((theme) => ({\n//   screenshot: {\n//     height: 300,\n//   },\n// }));\n\nclass WelcomePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalShow: false,\n      currentCourses: [],\n      currentClasses: [],\n      allSubjects: [],\n      courseNumbers: [],\n      subjectBox: '',\n      courseNumberBox: '',\n      courseUnavailAlertShow: false,\n      rawCourses: '',\n      courseInfo: [],\n      scheduleInvalidAlertShow: false,\n    };\n    this.courseNumberBoxRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadSubjects();\n  }\n\n  loadCourseInfo = async (courseNames) => {\n    const allUrl = courseNames.map((str) => {\n      const [sub, cata] = str.split(' ');\n      return `https://api.uwaterloo.ca/v2/courses/${sub}/${cata}/schedule.json`;\n    });\n    Promise.all(allUrl.map((url) => axios.get(url, {\n      params: {\n        key: apiKey,\n      },\n    }))).then((values) => {\n      const courseInfo = values.map((value) => value.data.data);\n      this.setState({ courseInfo });\n    });\n  }\n\n  parseCourses = (rawCourses) => {\n    const classNumbers = rawCourses.match(/^\\d{4}$/gm);\n    const courseNames = rawCourses.match(/[A-Z]{2,6} \\d{1,3}[A-Z]? - /g).map((x) => x.substring(0, x.length - 3));\n\n    this.setState({\n      currentCourses: courseNames.map(\n        (item) => ({ courseCode: item, keepable: true, keep: true }),\n      ),\n      currentClasses: classNumbers.map((item) => parseInt(item, 10)),\n    });\n    this.loadCourseInfo(courseNames);\n  }\n\n  showScheduleInvalidAlert = () => this.setState({ scheduleInvalidAlertShow: true });\n\n  hideScheduleInvalidAlert = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    this.setState({ scheduleInvalidAlertShow: false });\n  }\n\n  showCourseUnavailAlert = () => this.setState({ courseUnavailAlertShow: true });\n\n  hideCourseUnavailAlert = () => this.setState({ courseUnavailAlertShow: false });\n\n  showModal = () => {\n    const { rawCourses } = this.state;\n    try {\n      this.parseCourses(rawCourses);\n      this.setState({\n        modalShow: true,\n      });\n    } catch (error) {\n      this.showScheduleInvalidAlert();\n    }\n  }\n\n  hideModal = () => {\n    this.setState({\n      modalShow: false,\n      subjectBox: '',\n      courseNumberBox: '',\n      courseNumbers: [],\n    });\n  }\n\n  dropCourse = (courseCode) => {\n    const { currentCourses, courseInfo } = this.state;\n    const newCurrentCourses = currentCourses.filter((item) => item.courseCode !== courseCode);\n    const newCourseInfo = courseInfo.filter((item) => getCourseCode(item[0]) !== courseCode);\n    this.setState({\n      currentCourses: newCurrentCourses,\n      courseInfo: newCourseInfo,\n    });\n    this.render();\n  }\n\n  loadSubjects = async () => {\n    const url = 'https://api.uwaterloo.ca/v2/codes/subjects.json';\n    const response = await axios.get(url, {\n      params: {\n        key: apiKey,\n      },\n    });\n    const allSubjects = response.data.data.map((item) => item.subject);\n    this.setState({\n      allSubjects,\n    });\n  }\n\n  loadCourseNumbers = async (subject) => {\n    if (!subject) {\n      this.setState({ courseNumbers: [] });\n      return;\n    }\n    const url = `https://api.uwaterloo.ca/v2/courses/${subject}.json`;\n    const response = await axios.get(url, {\n      params: {\n        key: apiKey,\n      },\n    });\n    const courseNumbers = response.data.data.map((item) => item.catalog_number);\n    this.setState({\n      courseNumbers,\n    });\n  }\n\n  updateRawCourses = (rawCourses) => {\n    this.setState({ rawCourses });\n  }\n\n  handleAddClick = async () => {\n    const {\n      subjectBox, courseNumberBox, currentCourses, courseInfo,\n    } = this.state;\n    if (!subjectBox || !courseNumberBox) {\n      return;\n    }\n    const url = `https://api.uwaterloo.ca/v2/courses/${subjectBox}/${courseNumberBox}/schedule.json`;\n    const response = await axios.get(url, {\n      params: {\n        key: apiKey,\n      },\n    });\n    const courseCode = `${subjectBox} ${courseNumberBox}`;\n    if (response.data.meta.status !== 200) {\n      this.showCourseUnavailAlert();\n      return;\n    }\n\n    const newCurrentCourses = currentCourses.slice();\n    if (newCurrentCourses.filter((item) => courseCode === item.courseCode).length) {\n      return;\n    }\n    newCurrentCourses.push({\n      courseCode,\n      keepable: false,\n      keep: false,\n    });\n    const newCourseInfo = courseInfo.slice();\n    newCourseInfo.push(response.data.data);\n    this.setState({\n      currentCourses: newCurrentCourses,\n      courseInfo: newCourseInfo,\n    });\n  }\n\n  handleViewScheduleClick = () => {\n    const { currentCourses, currentClasses, courseInfo } = this.state;\n    const data = formatPostData(currentCourses, currentClasses, courseInfo);\n    // eslint-disable-next-line no-console\n    console.log(data);\n  }\n\n  render() {\n    const {\n      modalShow, currentCourses, allSubjects, courseNumbers,\n      subjectBox, courseNumberBox, scheduleInvalidAlertShow, courseUnavailAlertShow,\n    } = this.state;\n\n    return (\n      <ThemeProvider theme={theme}>\n        <Box p={2}>\n          <CssBaseline />\n          <Snackbar\n            open={scheduleInvalidAlertShow}\n            onClose={this.hideScheduleInvalidAlert}\n            autoHideDuration={3000}\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n          >\n            <Alert severity=\"warning\" onClose={this.hideScheduleInvalidAlert}>\n              Your course info cannot be read. Please try again.\n            </Alert>\n          </Snackbar>\n          <img src={logo} alt=\"Logo\" className=\"logo\" />\n\n          <Grid container justify=\"center\" spacing={6}>\n            <Grid item xs={12} md={4} lg={3}>\n              <Card className=\"card\" raised>\n                <CardHeader title=\"Step 1\" className=\"header\" />\n                <CardContent>\n                  <Typography variant=\"body1\">\n                    Go to&nbsp;\n                    <Link href=\"https://quest.pecs.uwaterloo.ca/psp/SS/ACADEMIC/SA/?cmd=login&languageCd=ENG\" target=\"_blank\">Quest</Link>\n                    &nbsp;and click &quot;Class Schedule&quot;.\n                  </Typography>\n                </CardContent>\n                <CardMedia\n                  image={step1}\n                  title=\"Go to Class Schedule\"\n                  className=\"step-img\"\n                />\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={4} lg={3}>\n              <Card className=\"card\" raised>\n                <CardHeader title=\"Step 2\" className=\"header\" />\n                <CardContent>\n                  <Typography variant=\"body1\">Choose your term, select all and copy.</Typography>\n                </CardContent>\n                <CardMedia\n                  image={step2}\n                  title=\"Select All and Copy\"\n                  className=\"step-img\"\n                />\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={4} lg={3}>\n              <Card raised style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n                <CardHeader title=\"Step 3\" className=\"header\" />\n                <CardContent>\n                  <Box mb={2}>\n                    <Typography variant=\"body1\">Paste into the box below.</Typography>\n                  </Box>\n                  <TextField\n                    multiline\n                    required\n                    variant=\"outlined\"\n                    fullWidth\n                    rows={12}\n                    onChange={(e) => this.updateRawCourses(e.target.value)}\n                  />\n                </CardContent>\n                <CardActions className=\"stick-bottom\">\n                  <Box p={1} width={1}>\n                    <Button color=\"primary\" variant=\"contained\" size=\"large\" fullWidth onClick={this.showModal}>Next</Button>\n                  </Box>\n                </CardActions>\n              </Card>\n            </Grid>\n          </Grid>\n\n          <Modal\n            open={modalShow}\n            onClose={this.hideModal}\n            className=\"flex-container\"\n            style={{ alignItems: 'center', justifyContent: 'center' }}\n            BackdropComponent={Backdrop}\n            BackdropProps={{\n              timeout: 500,\n            }}\n            closeAfterTransition\n          >\n            <Fade in={modalShow}>\n              <Paper style={{ width: 800, outline: 'none' }}>\n                <Box p={2} className=\"header\">\n                  <Typography variant=\"h5\">Edit my courses</Typography>\n                </Box>\n                <Grid container>\n                  <Grid item xs={12} sm>\n                    <List style={{ overflowY: 'scroll', height: 360 }}>\n                      {currentCourses.map((item) => {\n                        const { courseCode, keepable, keep } = item;\n                        return (\n                          <CourseItem\n                            key={courseCode}\n                            courseCode={courseCode}\n                            keepable={keepable}\n                            keep={keep}\n                            onDropClick={() => this.dropCourse(courseCode)}\n                          />\n                        );\n                      })}\n                    </List>\n                  </Grid>\n                  <Grid item xs={12} sm>\n                    <Box p={2}>\n                      <Autocomplete\n                        className=\"margin-bottom-16\"\n                        id=\"subjectBox\"\n                        options={allSubjects}\n                        renderInput={(params) => (\n                          <TextField\n                            // eslint-disable-next-line react/jsx-props-no-spreading\n                            {...params}\n                            label=\"Subject\"\n                            variant=\"outlined\"\n                            fullWidth\n                          />\n                        )}\n                        onChange={(_event, value) => {\n                          if (value === subjectBox) {\n                            return;\n                          }\n                          this.loadCourseNumbers(value);\n                          this.setState({\n                            subjectBox: (value || '').toUpperCase(),\n                            courseNumberBox: '',\n                          });\n                          if (value) {\n                            this.courseNumberBoxRef.current.focus();\n                          }\n                        }}\n                        value={subjectBox}\n                      />\n                      <Autocomplete\n                        className=\"margin-bottom-16\"\n                        id=\"courseNumberBox\"\n                        options={courseNumbers}\n                        getOptionLabel={(option) => option}\n                        renderInput={(params) => (\n                          <TextField\n                            // eslint-disable-next-line react/jsx-props-no-spreading\n                            {...params}\n                            label=\"Course number\"\n                            variant=\"outlined\"\n                            fullWidth\n                            inputRef={this.courseNumberBoxRef}\n                          />\n                        )}\n                        onChange={(_event, value) => {\n                          this.setState({\n                            courseNumberBox: value,\n                          });\n                        }}\n                        value={courseNumberBox}\n                      />\n                      <div className=\"flex-container\">\n                        <Box ml=\"auto\">\n                          <Button color=\"primary\" variant=\"outlined\" onClick={this.handleAddClick}>Add Course</Button>\n                        </Box>\n                      </div>\n                      <Snackbar\n                        open={courseUnavailAlertShow}\n                        onClose={this.hideCourseUnavailAlert}\n                        autoHideDuration={3000}\n                        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                      >\n                        <Alert severity=\"warning\" onClose={this.hideCourseUnavailAlert}>\n                          {`${subjectBox} ${courseNumberBox}`}\n                          &nbsp;is unavailable for this term.\n                        </Alert>\n                      </Snackbar>\n                    </Box>\n                  </Grid>\n                </Grid>\n                <Divider />\n                <Box p={2}>\n                  <Button size=\"large\" variant=\"contained\" color=\"primary\" fullWidth onClick={this.handleViewScheduleClick}>View Recommended Schedules</Button>\n                </Box>\n              </Paper>\n            </Fade>\n          </Modal>\n        </Box>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default WelcomePage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport WelcomePage from './welcome_page/index';\n\nReactDOM.render(<WelcomePage />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/icon.47f3ae83.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar-step-1.5a0cc442.png\";","module.exports = __webpack_public_path__ + \"static/media/calendar-step-2.514203ac.png\";"],"sourceRoot":""}