{"version":3,"sources":["components/CourseItem/index.jsx","utils/courses.js","welcome_page/index.jsx","index.jsx","res/icon.svg","res/calendar-step-1.png","res/calendar-step-2.png"],"names":["CourseItem","props","courseCode","keepable","keep","onDropClick","ListItem","ListItemText","primary","ListItemSecondaryAction","Hidden","xsUp","Tooltip","title","IconButton","aria-label","disabled","Lock","LockOpen","onClick","Close","getCourseCode","classInfo","subject","catalog_number","apiKey","theme","createMuiTheme","palette","main","blue","light","dark","WelcomePage","makeStyles","screenshot","height","loadCourseInfo","courseNames","a","async","allUrl","map","str","split","sub","cata","Promise","all","url","axios","get","params","key","then","values","courseInfo","value","data","console","log","setState","parseCourses","rawCourses","classNumbers","match","x","substring","length","currentCourses","item","currentClasses","parseInt","showScheduleInvalidAlert","scheduleInvalidAlertShow","hideScheduleInvalidAlert","event","reason","showCourseUnavailAlert","courseUnavailAlertShow","hideCourseUnavailAlert","showModal","state","modalShow","error","hideModal","subjectBox","courseNumberBox","courseNumbers","dropCourse","newCurrentCourses","filter","newCourseInfo","render","loadSubjects","response","allSubjects","loadCourseNumbers","updateRawCourses","handleAddClick","meta","status","slice","push","handleViewScheduleClick","filteredCourseInfo","course","s","campus","grouped","dict","_","groupBy","section","groupedSectionList","forEach","currentCoursesDict","keyBy","courses_info","filtered_courses","includes","class_number","other","primarySection","allowedComponents","component","allowedSections","classInfo2","associated_class","isEmpty","concat","formatPostData","courseNumberBoxRef","React","createRef","this","ThemeProvider","Box","p","CssBaseline","Snackbar","open","onClose","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","severity","src","logo","alt","className","Grid","container","justify","spacing","xs","md","lg","Card","raised","CardHeader","CardContent","Typography","variant","Link","href","target","CardMedia","image","step1","step2","style","display","flexDirection","mb","TextField","multiline","required","fullWidth","rows","onChange","e","CardActions","width","Button","color","size","Modal","alignItems","justifyContent","BackdropComponent","Backdrop","BackdropProps","timeout","closeAfterTransition","Fade","in","Paper","outline","sm","List","overflowY","Autocomplete","id","options","renderInput","label","_event","toUpperCase","current","focus","getOptionLabel","option","inputRef","ml","Divider","Component","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a0187c66.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ListItem, ListItemText, ListItemSecondaryAction, IconButton, Tooltip, Hidden,\n} from '@material-ui/core';\nimport { Close, Lock, LockOpen } from '@material-ui/icons';\n\nfunction CourseItem(props) {\n  const {\n    courseCode, keepable, keep, onDropClick,\n  } = props;\n\n  return (\n    <ListItem>\n      <ListItemText primary={courseCode} />\n      <ListItemSecondaryAction>\n        {/* TODO: Keep toggle */}\n        <Hidden xsUp={!keepable}>\n          <Tooltip\n            title={keep\n              ? 'This course will be kept unchanged in the schedule.'\n              : 'This course is allowed to be changed'}\n          >\n            <span>\n              <IconButton aria-label=\"keep unchanged\" disabled={!keepable || true}>\n                {/* Remove || true when implementing keepable */}\n                {keep ? <Lock /> : <LockOpen />}\n              </IconButton>\n            </span>\n          </Tooltip>\n        </Hidden>\n        <Tooltip title=\"Drop this course\">\n          <IconButton aria-label=\"drop\" onClick={onDropClick}>\n            <Close />\n          </IconButton>\n        </Tooltip>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n}\n\nCourseItem.propTypes = {\n  courseCode: PropTypes.string.isRequired,\n  keepable: PropTypes.bool.isRequired,\n  keep: PropTypes.bool.isRequired,\n  onDropClick: PropTypes.func.isRequired,\n};\n\nexport default CourseItem;\n","import _ from 'lodash';\n\n/**\n * @typedef {{ courseCode: string, keepable: boolean, keep: boolean }} CurrentCourse\n */\n\n/**\n * @typedef {Object} ClassInfo\n * @property {string} subject\n * @property {number} catalog_number\n * @property {number} associated_class\n * @property {string} section\n * @property {string} campus\n */\n\n/**\n * Determines whether two classes are associated.\n * @param {ClassInfo} classInfo1 the ClassInfo object to compare.\n * @param {ClassInfo} classInfo2 the other ClassInfo object to compare.\n */\nconst areAssociated = (classInfo1, classInfo2) => (\n  classInfo1.associated_class === classInfo2.associated_class\n);\n\n/**\n * Returns the course code of a class.\n * @param {ClassInfo} classInfo the ClassInfo object to get course code from.\n */\nconst getCourseCode = (classInfo) => `${classInfo.subject} ${classInfo.catalog_number}`;\n\n/**\n * Determines whether a class in online.\n * @param {ClassInfo} classInfo the ClassInfo object to check.\n */\nconst isOnline = (classInfo) => classInfo.campus === 'ONLN ONLINE';\n\n/**\n * Formats data for use in back-end.\n * @param {CurrentCourse[]} currentCourses the list of current courses.\n * @param {number[]} currentClasses the list of current class numbers.\n * @param {ClassInfo[][]} courseInfo the courses information obtained from API.\n */\nconst formatPostData = (currentCourses, currentClasses, courseInfo) => {\n  const filteredCourseInfo = courseInfo.map((course) => course.filter((s) => !isOnline(s)));\n\n  const grouped = filteredCourseInfo.map((course) => {\n    const dict = _.groupBy(course, (s) => s.section[4]);\n    const groupedSectionList = [];\n    _.forEach(dict, (value, key) => {\n      groupedSectionList[key] = value;\n    });\n    return groupedSectionList;\n  });\n\n  const currentCoursesDict = _.keyBy(currentCourses, 'courseCode');\n\n  const associatedClassList = grouped.map((course) => {\n    let primary = course[0];\n    const keepUnchanged = currentCoursesDict[getCourseCode(primary[0])].keep;\n    if (keepUnchanged) {\n      primary = primary.filter((section) => currentClasses.includes(section.class_number));\n    }\n\n    const other = course.slice(1);\n    const rearranged = primary.map((primarySection) => {\n      const allowedComponents = other.map((component) => {\n        let allowedSections = component.filter(\n          (section) => areAssociated(primarySection, section),\n        );\n        if (_.isEmpty(allowedSections)) {\n          allowedSections = component.filter((section) => section.associated_class === 99);\n        }\n        return _.map(allowedSections, 'class_number');\n      });\n      return [[primarySection.class_number]].concat(allowedComponents);\n    });\n    return rearranged;\n  });\n\n  return {\n    courses_info: filteredCourseInfo,\n    filtered_courses: associatedClassList,\n  };\n};\n\nexport {\n  areAssociated,\n  getCourseCode,\n  formatPostData,\n};\n","import React from 'react';\nimport {\n  Button, TextField, Typography, makeStyles, Grid, Modal, Link, List,\n  Card, CardContent, CardHeader, CardMedia, CardActions,\n  Paper, CssBaseline, Divider, Snackbar, Fade, Backdrop, createMuiTheme, ThemeProvider, Box,\n} from '@material-ui/core';\nimport { Autocomplete, Alert } from '@material-ui/lab';\nimport { blue } from '@material-ui/core/colors';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport CourseItem from 'components/CourseItem';\nimport './index.css';\nimport { areAssociated, getCourseCode, formatPostData } from 'utils/courses';\nimport logo from 'res/icon.svg';\nimport step1 from 'res/calendar-step-1.png';\nimport step2 from 'res/calendar-step-2.png';\n\nconst apiKey = '4ad350333dc3859b91bcf443d14e4bf0';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: blue[500],\n      light: '#6ec6ff',\n      dark: '#0069c0',\n    },\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  screenshot: {\n    height: 300,\n  },\n}));\n\nclass WelcomePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalShow: false,\n      currentCourses: [],\n      currentClasses: [],\n      allSubjects: [],\n      courseNumbers: [],\n      subjectBox: '',\n      courseNumberBox: '',\n      courseUnavailAlertShow: false,\n      rawCourses: '',\n      courseInfo: [],\n      scheduleInvalidAlertShow: false,\n    };\n    this.courseNumberBoxRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.loadSubjects();\n  }\n\n  loadCourseInfo = async (courseNames) => {\n    const allUrl = courseNames.map((str) => {\n      const [sub, cata] = str.split(' ');\n      return `https://api.uwaterloo.ca/v2/courses/${sub}/${cata}/schedule.json`;\n    });\n    Promise.all(allUrl.map((url) => axios.get(url, {\n      params: {\n        key: apiKey,\n      },\n    }))).then((values) => {\n      const courseInfo = values.map((value) => value.data.data);\n      console.log(courseInfo);\n      this.setState({ courseInfo });\n    });\n  }\n\n  parseCourses = (rawCourses) => {\n    const classNumbers = rawCourses.match(/^\\d{4}$/gm);\n    const courseNames = rawCourses.match(/[A-Z]{2,6} \\d{1,3}[A-Z]? - /g).map((x) => x.substring(0, x.length - 3));\n\n    this.setState({\n      currentCourses: courseNames.map(\n        (item) => ({ courseCode: item, keepable: true, keep: true }),\n      ),\n      currentClasses: classNumbers.map((item) => parseInt(item, 10)),\n    });\n    this.loadCourseInfo(courseNames);\n  }\n\n  showScheduleInvalidAlert = () => this.setState({ scheduleInvalidAlertShow: true });\n\n  hideScheduleInvalidAlert = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    this.setState({ scheduleInvalidAlertShow: false });\n  }\n\n  showCourseUnavailAlert = () => this.setState({ courseUnavailAlertShow: true });\n\n  hideCourseUnavailAlert = () => this.setState({ courseUnavailAlertShow: false });\n\n  showModal = () => {\n    const { rawCourses } = this.state;\n    try {\n      this.parseCourses(rawCourses);\n      this.setState({\n        modalShow: true,\n      });\n    } catch (error) {\n      this.showScheduleInvalidAlert();\n    }\n  }\n\n  hideModal = () => {\n    this.setState({\n      modalShow: false,\n      subjectBox: '',\n      courseNumberBox: '',\n      courseNumbers: [],\n    });\n  }\n\n  dropCourse = (courseCode) => {\n    const { currentCourses, courseInfo } = this.state;\n    const newCurrentCourses = currentCourses.filter((item) => item.courseCode !== courseCode);\n    const newCourseInfo = courseInfo.filter((item) => getCourseCode(item[0]) !== courseCode);\n    this.setState({\n      currentCourses: newCurrentCourses,\n      courseInfo: newCourseInfo,\n    });\n    this.render();\n  }\n\n  loadSubjects = async () => {\n    const url = 'https://api.uwaterloo.ca/v2/codes/subjects.json';\n    const response = await axios.get(url, {\n      params: {\n        key: apiKey,\n      },\n    });\n    const allSubjects = response.data.data.map((item) => item.subject);\n    this.setState({\n      allSubjects,\n    });\n  }\n\n  loadCourseNumbers = async (subject) => {\n    if (!subject) {\n      this.setState({ courseNumbers: [] });\n      return;\n    }\n    const url = `https://api.uwaterloo.ca/v2/courses/${subject}.json`;\n    const response = await axios.get(url, {\n      params: {\n        key: apiKey,\n      },\n    });\n    const courseNumbers = response.data.data.map((item) => item.catalog_number);\n    this.setState({\n      courseNumbers,\n    });\n  }\n\n  updateRawCourses = (rawCourses) => {\n    this.setState({ rawCourses });\n  }\n\n  handleAddClick = async () => {\n    const {\n      subjectBox, courseNumberBox, currentCourses, courseInfo,\n    } = this.state;\n    if (!subjectBox || !courseNumberBox) {\n      return;\n    }\n    const url = `https://api.uwaterloo.ca/v2/courses/${subjectBox}/${courseNumberBox}/schedule.json`;\n    const response = await axios.get(url, {\n      params: {\n        key: apiKey,\n      },\n    });\n    const courseCode = `${subjectBox} ${courseNumberBox}`;\n    if (response.data.meta.status !== 200) {\n      this.showCourseUnavailAlert();\n      return;\n    }\n\n    const newCurrentCourses = currentCourses.slice();\n    if (newCurrentCourses.filter((item) => courseCode === item.courseCode).length) {\n      return;\n    }\n    newCurrentCourses.push({\n      courseCode,\n      keepable: false,\n      keep: false,\n    });\n    const newCourseInfo = courseInfo.slice();\n    newCourseInfo.push(response.data.data);\n    this.setState({\n      currentCourses: newCurrentCourses,\n      courseInfo: newCourseInfo,\n    });\n  }\n\n  handleViewScheduleClick = () => {\n    const { currentCourses, currentClasses, courseInfo } = this.state;\n    const data = formatPostData(currentCourses, currentClasses, courseInfo);\n    console.log(data);\n  }\n\n  render() {\n    const {\n      modalShow, currentCourses, allSubjects, courseNumbers,\n      subjectBox, courseNumberBox, scheduleInvalidAlertShow, courseUnavailAlertShow,\n    } = this.state;\n\n    return (\n      <ThemeProvider theme={theme}>\n        <Box p={2}>\n          <CssBaseline />\n          <Snackbar\n            open={scheduleInvalidAlertShow}\n            onClose={this.hideScheduleInvalidAlert}\n            autoHideDuration={3000}\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n          >\n            <Alert severity=\"warning\" onClose={this.hideScheduleInvalidAlert}>\n              Your course info cannot be read. Please try again.\n            </Alert>\n          </Snackbar>\n          <img src={logo} alt=\"Logo\" className=\"logo\" />\n\n          <Grid container justify=\"center\" spacing={4}>\n            <Grid item xs={12} md={4} lg={3}>\n              <Card raised>\n                <CardHeader title=\"Step 1\" className=\"header\" />\n                <CardContent>\n                  <Typography variant=\"body1\">\n                    Go to&nbsp;\n                    <Link href=\"https://quest.pecs.uwaterloo.ca/psp/SS/ACADEMIC/SA/?cmd=login&languageCd=ENG\" target=\"_blank\">Quest</Link>\n                    &nbsp;and click &quot;Class Schedule&quot;.\n                  </Typography>\n                </CardContent>\n                <CardMedia\n                  image={step1}\n                  title=\"Go to Class Schedule\"\n                  className=\"step-img\"\n                />\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={4} lg={3}>\n              <Card raised>\n                <CardHeader title=\"Step 2\" className=\"header\" />\n                <CardContent>\n                  <Typography variant=\"body1\">Choose your term, then select all and copy.</Typography>\n                </CardContent>\n                <CardMedia\n                  image={step2}\n                  title=\"Select All and Copy\"\n                  className=\"step-img\"\n                />\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={4} lg={3}>\n              <Card raised style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>\n                <CardHeader title=\"Step 3\" className=\"header\" />\n                <CardContent>\n                  <Box mb={2}>\n                    <Typography variant=\"body1\">Paste into the box below.</Typography>\n                  </Box>\n                  <TextField\n                    multiline\n                    required\n                    variant=\"outlined\"\n                    fullWidth\n                    rows={12}\n                    onChange={(e) => this.updateRawCourses(e.target.value)}\n                  />\n                </CardContent>\n                <CardActions className=\"stick-bottom\">\n                  <Box p={1} width={1}>\n                    <Button color=\"primary\" variant=\"contained\" size=\"large\" fullWidth onClick={this.showModal}>Next</Button>\n                  </Box>\n                </CardActions>\n              </Card>\n            </Grid>\n          </Grid>\n\n          <Modal\n            open={modalShow}\n            onClose={this.hideModal}\n            className=\"flex-container\"\n            style={{ alignItems: 'center', justifyContent: 'center' }}\n            BackdropComponent={Backdrop}\n            BackdropProps={{\n              timeout: 500,\n            }}\n            closeAfterTransition\n          >\n            <Fade in={modalShow}>\n              <Paper style={{ width: 800, outline: 'none' }}>\n                <Box p={2} className=\"header\">\n                  <Typography variant=\"h5\">Edit my courses</Typography>\n                </Box>\n                <Grid container>\n                  <Grid item xs={12} sm>\n                    <List style={{ overflowY: 'scroll', height: 360 }}>\n                      {currentCourses.map((item) => {\n                        const { courseCode, keepable, keep } = item;\n                        return (\n                          <CourseItem\n                            key={courseCode}\n                            courseCode={courseCode}\n                            keepable={keepable}\n                            keep={keep}\n                            onDropClick={() => this.dropCourse(courseCode)}\n                          />\n                        );\n                      })}\n                    </List>\n                  </Grid>\n                  <Grid item xs={12} sm>\n                    <Box p={2}>\n                      <Autocomplete\n                        className=\"margin-bottom-16\"\n                        id=\"subjectBox\"\n                        options={allSubjects}\n                        renderInput={(params) => (\n                          <TextField {...params}\n                            label=\"Subject\"\n                            variant=\"outlined\"\n                            fullWidth\n                          />\n                        )}\n                        onChange={(_event, value) => {\n                          if (value === subjectBox) {\n                            return;\n                          }\n                          this.loadCourseNumbers(value);\n                          this.setState({\n                            subjectBox: (value || '').toUpperCase(),\n                            courseNumberBox: '',\n                          });\n                          if (value) {\n                            this.courseNumberBoxRef.current.focus();\n                          }\n                        }}\n                        value={subjectBox}\n                      />\n                      <Autocomplete\n                        className=\"margin-bottom-16\"\n                        id=\"courseNumberBox\"\n                        options={courseNumbers}\n                        getOptionLabel={(option) => option}\n                        renderInput={(params) => (\n                          <TextField {...params}\n                            label=\"Course number\"\n                            variant=\"outlined\"\n                            fullWidth\n                            inputRef={this.courseNumberBoxRef}\n                          />\n                        )}\n                        onChange={(_event, value) => {\n                          this.setState({\n                            courseNumberBox: value,\n                          });\n                        }}\n                        value={courseNumberBox}\n                      />\n                      <div className=\"flex-container\">\n                        <Box ml=\"auto\">\n                          <Button color=\"primary\" variant=\"outlined\" onClick={this.handleAddClick}>Add Course</Button>\n                        </Box>\n                      </div>\n                      <Snackbar\n                        open={courseUnavailAlertShow}\n                        onClose={this.hideCourseUnavailAlert}\n                        autoHideDuration={3000}\n                        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                      >\n                        <Alert severity=\"warning\" onClose={this.hideCourseUnavailAlert}>\n                          {`${subjectBox} ${courseNumberBox}`}\n                          &nbsp;is unavailable for this term.\n                        </Alert>\n                      </Snackbar>\n                    </Box>\n                  </Grid>\n                </Grid>\n                <Divider />\n                <Box p={2}>\n                  <Button size=\"large\" variant=\"contained\" color=\"primary\" fullWidth onClick={this.handleViewScheduleClick}>View Recommended Schedules</Button>\n                </Box>\n              </Paper>\n            </Fade>\n          </Modal>\n        </Box>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default WelcomePage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport WelcomePage from './welcome_page/index';\n\nReactDOM.render(<WelcomePage />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/icon.47f3ae83.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar-step-1.6611ddd8.png\";","module.exports = __webpack_public_path__ + \"static/media/calendar-step-2.cb8ab16f.png\";"],"sourceRoot":""}