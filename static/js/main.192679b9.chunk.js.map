{"version":3,"sources":["components/CourseItem/index.jsx","utils/courses.js","utils/uwapi.js","welcome_page/index.jsx","index.jsx","res/icon.svg","res/calendar-step-1.png","res/calendar-step-2.png"],"names":["CourseItem","props","courseCode","keepable","keep","onDropClick","ListItem","ListItemText","primary","ListItemSecondaryAction","Hidden","xsUp","Tooltip","title","IconButton","aria-label","disabled","Lock","LockOpen","onClick","RemoveCircleOutline","getCourseCode","classInfo","subject","catalog_number","isOnline","campus","formatPostData","currentCourses","currentClasses","courseInfo","currentCoursesDict","_","keyBy","filteredCourseInfo","map","course","filtered","filter","s","classes","some","value","date","is_closed","section","includes","class_number","uniqWith","a","b","associated_class","slice","length","i","isEqual","grouped","dict","groupBy","groupedSectionList","forEach","key","courses_info","filtered_courses","other","primarySection","allowedComponents","component","allowedSections","classInfo2","isEmpty","concat","rootUrl","UWAPI","apiKey","timeout","sendUrlRequest","url","async","params","axios","get","baseURL","timeoutErrorMessage","response","data","meta","status","error","Error","message","name","sendBulkUrlRequest","urlList","instance","create","promises","getSubjectCodes","subjects","item","getCourseNumbers","courses","getCourseSchedule","catalogNumber","term","undefined","getCourseScheduleMulti","courseCodeList","code","split","sub","cata","this","uwapi","useStyles","makeStyles","theme","addCourseInput","marginBottom","spacing","backdrop","zIndex","drawer","color","currentCoursesList","overflowY","height","editCourseModal","alignItems","display","justifyContent","editCoursePaper","outline","width","flexContainer","flexDirection","flexGrow","fullHeight","header","background","logo","marginTop","marginLeft","marginRight","stepImage","paddingTop","stickBottom","stickRight","createMuiTheme","breakpoints","values","xs","sm","md","lg","xl","palette","main","blue","light","dark","WelcomePage","useState","coursesInfo","setCoursesInfo","availSubjects","setAvailSubjects","availCourseNumbers","setAvailCourseNumbers","setCurrentClasses","setCurrentCourses","editCourseModalOpen","setEditCourseModalOpen","fullPageLoading","setFullPageLoading","snackbarOpen","setSnackbarOpen","snackbarSeverity","setSnackbarSeverity","snackbarTitle","setSnackbarTitle","snackbarText","setSnackbarText","scheduleImportInput","setScheduleImportInput","addCourseSubjectInput","setAddCourseSubjectInput","addCourseNumberInput","setAddCourseNumberInput","addCourseLoading","setAddCourseLoading","addCourseNumberInputRef","useRef","showSnackbar","severity","text","hideSnackbar","event","reason","useEffect","loadAvailSubjects","isValidSchedule","classNumbers","completeClassNumbers","flatten","obj","every","number","showScheduleInvalidAlert","parseCourses","rawCourses","match","courseNames","x","substring","all","then","catch","startsWith","finally","loadCourseInfo","parseInt","closeEditCourseModal","handlePaste","pasteText","showModal","ThemeProvider","CssBaseline","Snackbar","open","onClose","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","AlertTitle","src","alt","className","Container","maxWidth","Grid","container","justify","Card","raised","CardHeader","CardContent","Typography","variant","Link","href","target","CardMedia","image","step1","step2","Box","mb","TextField","onPaste","e","clipboardData","getData","multiline","required","fullWidth","rows","InputProps","inputProps","Modal","BackdropComponent","Backdrop","BackdropProps","closeAfterTransition","disableBackdropClick","Fade","in","Paper","AppBar","position","elevation","Toolbar","Close","List","newCurrentCourses","newCourseInfo","dropCourse","smUp","Divider","p","Autocomplete","id","options","renderInput","label","onChange","_event","courseNumbers","loadAvailCourseNumbers","toUpperCase","current","focus","getOptionLabel","option","inputRef","mx","CircularProgress","size","Math","sqrt","Button","classesInfo","push","console","log","post","ReactDOM","render","document","getElementById","module","exports"],"mappings":"miBAgDeA,MAzCf,SAAoBC,GAAQ,IAExBC,EACED,EADFC,WAAYC,EACVF,EADUE,SAAUC,EACpBH,EADoBG,KAAMC,EAC1BJ,EAD0BI,YAG9B,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcC,QAASN,IACvB,kBAACO,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAQC,MAAOR,GACb,kBAACS,EAAA,EAAD,CACEC,MAAOT,EACH,sDACA,wCAEJ,8BACE,kBAACU,EAAA,EAAD,CAAYC,aAAW,iBAAiBC,UAAWb,IAAY,GAE5DC,EAAO,kBAACa,EAAA,EAAD,MAAW,kBAACC,EAAA,EAAD,UAK3B,kBAACN,EAAA,EAAD,CAASC,MAAM,oBACb,kBAACC,EAAA,EAAD,CAAYC,aAAW,OAAOI,QAASd,GACrC,kBAACe,EAAA,EAAD,W,iBCcNC,EAAgB,SAACC,GAAD,gBAAkBA,EAAUC,QAA5B,YAAuCD,EAAUE,iBAMjEC,GAAW,SAACH,GAAD,MAAoC,gBAArBA,EAAUI,QAcpCC,GAAiB,SAACC,EAAgBC,EAAgBC,GACtD,IAAMC,EAAqBC,IAAEC,MAAML,EAAgB,cAE7CM,EAAqBJ,EAAWK,KAAI,SAACC,GACzC,IAAIC,EAAWD,EAAOE,QAAO,SAACC,GAAD,OAAiBA,EAZRC,QAAQC,MAAK,SAACC,GAAD,OAAWA,EAAMC,KAAKC,eAYpBnB,GAASc,MAsB9D,OArBsBR,EAAmBV,EAAce,EAAO,KAAKhC,OAEjEiC,EAAWA,EAASC,QAAO,SAACO,GAAD,OAAahB,EAAeiB,SAASD,EAAQE,kBAEtDf,IAAEgB,SAASX,GAAU,SAACY,EAAGC,GAC3C,GAAID,EAAEE,mBAAqBD,EAAEC,iBAC3B,OAAO,EAET,GAAIF,EAAEJ,QAAQO,MAAM,EAAG,KAAOF,EAAEL,QAAQO,MAAM,EAAG,GAC/C,OAAO,EAET,GAAIH,EAAET,QAAQa,SAAWH,EAAEV,QAAQa,OACjC,OAAO,EAET,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAET,QAAQa,OAAQC,GAAK,EACzC,IAAKtB,IAAEuB,QAAQN,EAAET,QAAQc,GAAGX,KAAMO,EAAEV,QAAQc,GAAGX,MAC7C,OAAO,EAGX,OAAO,QAKLa,EAAUtB,EAAmBC,KAAI,SAACC,GACtC,IAAMqB,EAAOzB,IAAE0B,QAAQtB,GAAQ,SAACG,GAAD,OAAOA,EAAEM,QAAQ,MAC1Cc,EAAqB,GAI3B,OAHA3B,IAAE4B,QAAQH,GAAM,SAACf,EAAOmB,GACtBF,EAAmBE,GAAOnB,KAErBiB,KAqBT,MAAO,CACLG,aAAc5B,EACd6B,iBApB0BP,EAAQrB,KAAI,SAACC,GACvC,IAAM5B,EAAU4B,EAAO,GACjB4B,EAAQ5B,EAAOgB,MAAM,GAa3B,OAZmB5C,EAAQ2B,KAAI,SAAC8B,GAC9B,IAAMC,EAAoBF,EAAM7B,KAAI,SAACgC,GACnC,IAAIC,EAAkBD,EAAU7B,QAC9B,SAACO,GAAD,OAxEyBwB,EAwEkBxB,EAAhBoB,EAvExBd,mBAAqBkB,EAAWlB,iBADvB,IAAakB,KA6E3B,OAHIrC,IAAEsC,QAAQF,KACZA,EAAkBD,EAAU7B,QAAO,SAACO,GAAD,OAA0C,KAA7BA,EAAQM,qBAEnDnB,IAAEG,IAAIiC,EAAiB,mBAEhC,MAAO,CAAC,CAACH,EAAelB,eAAewB,OAAOL,W,kBCpH9CM,GAAU,8BAmGDC,GA5Fb,WAAYC,GAAyB,IAAD,OAAhBC,EAAgB,uDAAN,IAAM,0BAUpCC,eAAiB,SAAOC,GAAP,qCAAA5B,EAAA6B,OAAA,uDAAYC,EAAZ,+BAAqB,GAArB,WAAA9B,EAAA,MACQ+B,IAAMC,IAAIJ,EAAK,CACpCK,QAASV,GACTO,OAAO,gBACFA,EADC,CAEJlB,IAAK,EAAKa,SAEZC,QAAS,EAAKA,QACdQ,oBAAoB,WAAD,OAAa,EAAKR,YARxB,UACTS,EADS,SAUQA,EAASC,KAAxBC,EAVO,EAUPA,KAAMD,EAVC,EAUDA,KACM,MAAhBC,EAAKC,OAXM,sBAYPC,EAAQC,MAAMH,EAAKI,UACnBC,KAAN,aAAmBL,EAAKC,QAClBC,EAdO,gCAgBRH,GAhBQ,uCAVmB,KAkCpCO,mBAAqB,SAACC,GAA0B,IAAjBd,EAAgB,uDAAP,GAChCe,EAAWd,IAAMe,OAAO,CAC5Bb,QAASV,GACTG,QAAS,EAAKA,QACdQ,oBAAoB,WAAD,OAAa,EAAKR,WAEjCqB,EAAWH,EAAQ1D,KAAI,SAAC0C,GAAD,OAASiB,EAASb,IAAIJ,EAAK,CACtDE,OAAO,gBACFA,EADC,CAEJlB,IAAK,EAAKa,cAGd,OAAOsB,GA9C2B,KAoDpCC,gBAAkB,0BAAAhD,EAAA6B,OAAA,kEAAA7B,EAAA,MACO,EAAK2B,eAAe,yBAD3B,cACVsB,EADU,yBAETA,EAAS/D,KAAI,SAACgE,GAAD,OAAUA,EAAK5E,YAFnB,sCApDkB,KA6DpC6E,iBAAmB,SAAO7E,GAAP,eAAA0B,EAAA6B,OAAA,kEAAA7B,EAAA,MACK,EAAK2B,eAAL,mBAAgCrD,EAAhC,WADL,cACX8E,EADW,yBAEVA,EAAQlE,KAAI,SAACgE,GAAD,OAAUA,EAAK3E,mBAFjB,sCA7DiB,KAwEpC8E,kBAAoB,SAAO/E,EAASgF,GAAhB,+BAAAtD,EAAA6B,OAAA,uDAA+B0B,EAA/B,oCAAsCC,EAClD5B,EADY,mBACMtD,EADN,YACiBgF,EADjB,6BAAAtD,EAAA,MAEI,EAAK2B,eAAeC,EAAK,CAAE2B,UAF/B,cAEZhE,EAFY,yBAGXA,GAHW,sCAxEgB,KAmFpCkE,uBAAyB,SAACC,GAAsC,IAAtBH,EAAqB,4DAAdC,EACzCZ,EAAUc,EAAexE,KAAI,SAACyE,GAAU,IAAD,EACvBA,EAAKC,MAAM,KADY,mBACpCC,EADoC,KAC/BC,EAD+B,KAE3C,MAAM,YAAN,OAAmBD,EAAnB,YAA0BC,EAA1B,qBAEF,OAAO,EAAKnB,mBAAmBC,EAAS,CAAEW,UAvF1CQ,KAAKtC,OAASA,EACdsC,KAAKrC,QAAUA,G,sECSbsC,GAAQ,IAAIxC,GADH,oCAITyC,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,eAAgB,CACdC,aAAcF,EAAMG,QAAQ,IAE9BC,SAAU,CACRC,OAAQL,EAAMK,OAAOC,OAAS,EAC9BC,MAAO,WAETC,mBAAoB,CAClBC,UAAW,SACXC,OAAQ,KAEVC,gBAAiB,CACfC,WAAY,SACZC,QAAS,OACTC,eAAgB,UAElBC,gBAAiB,CACfC,QAAS,OACTC,MAAO,KAETC,cAAe,CACbL,QAAS,OACTM,cAAe,UAEjBC,SAAU,CACRA,SAAU,GAEZC,WAAY,CAAEX,OAAQ,QACtBY,OAAQ,CAAEC,WAAY,WACtBC,KAAM,CACJX,QAAS,QACTH,OAAQ,SACRe,UAAWzB,EAAMG,QAAQ,GACzBD,aAAcF,EAAMG,QAAQ,GAC5BuB,WAAY,OACZC,YAAa,QAEfD,WAAY,CAAEA,WAAY1B,EAAMG,QAAQ,IACxCyB,UAAW,CAAElB,OAAQ,EAAGmB,WAAY,QACpCC,YAAa,CAAEL,UAAW,QAC1BM,WAAY,CAAEL,WAAY,YAGtB1B,GAAQgC,YAAe,CAC3BC,YAAa,CACXC,OAAQ,CACNC,GAAI,EACJC,GAAI,IACJC,GAAI,KACJC,GAAI,KACJC,GAAI,OAGRC,QAAS,CACPpJ,QAAS,CACPqJ,KAAMC,IAAK,KACXC,MAAO,UACPC,KAAM,cA0aGC,OAraf,WAAuB,MAEiBC,mBAAS,IAF1B,mBAEdC,EAFc,KAEDC,EAFC,OAGqBF,mBAAS,IAH9B,mBAGdG,EAHc,KAGCC,EAHD,OAI+BJ,mBAAS,IAJxC,mBAIdK,EAJc,KAIMC,EAJN,OAKuBN,mBAAS,IALhC,mBAKdrI,EALc,KAKE4I,EALF,OAMuBP,mBAAS,IANhC,oBAMdtI,GANc,MAME8I,GANF,SASiCR,oBAAS,GAT1C,qBASdS,GATc,MASOC,GATP,SAUyBV,oBAAS,GAVlC,qBAUdW,GAVc,MAUGC,GAVH,SAWmBZ,oBAAS,GAX5B,qBAWda,GAXc,MAWAC,GAXA,SAY2Bd,mBAAS,IAZpC,qBAYde,GAZc,MAYIC,GAZJ,SAaqBhB,mBAAS,IAb9B,qBAadiB,GAbc,MAaCC,GAbD,SAcmBlB,mBAAS,IAd5B,qBAcdmB,GAdc,MAcAC,GAdA,SAeiCpB,mBAAS,IAf1C,qBAedqB,GAfc,MAeOC,GAfP,SAgBqCtB,mBAAS,IAhB9C,qBAgBduB,GAhBc,MAgBSC,GAhBT,SAiBmCxB,mBAAS,IAjB5C,qBAiBdyB,GAjBc,MAiBQC,GAjBR,SAkB2B1B,oBAAS,GAlBpC,qBAkBd2B,GAlBc,MAkBIC,GAlBJ,MAqBfC,GAA0BC,mBAG1BxJ,GAAU0E,KAEV+E,GAAe,SAACC,EAAUC,EAAMtL,GACpCqK,GAAoBgB,GACpBZ,GAAgBa,GAChBf,GAAiBvK,GAAS,IAC1BmK,IAAgB,IAGZoB,GAAe,SAACC,EAAOC,GACZ,cAAXA,GAGJtB,IAAgB,IAGlBuB,qBACE,YAC4B,mBAAAtJ,EAAA6B,OAAA,2EAAA7B,EAAA,MAECgE,GAAMhB,mBAFP,OAEhBC,EAFgB,OAGtBoE,EAAiBpE,GAHK,gDAKtB+F,GAAa,QAAS,2BALA,wDAQ1BO,KAEF,IAGF,IAAMC,GAAkB,SAAC3K,EAAY4K,GACnC,IAAMC,EAAuB3K,IAAE4K,QAAQ9K,GAAYK,KAAI,SAAC0K,GAAD,OAASA,EAAI9J,gBACpE,OAAO2J,EAAaI,OAAM,SAACC,GAAD,OAAYJ,EAAqB7J,SAASiK,OAIhEC,GAA2B,WAC/Bf,GACE,UACA,+CACA,oCA+BEgB,GAAe,SAACC,GACpB,IAAMR,EAAeQ,EAAWC,MAAM,aAChCC,EAAcF,EAAWC,MAAM,gCAAgChL,KAAI,SAACkL,GAAD,OAAOA,EAAEC,UAAU,EAAGD,EAAEhK,OAAS,MACtG6J,EAAWC,MAAM,aAAa9J,SAAWqJ,EAAarJ,QAAU6J,EAAWC,MAAM,cAAc9J,SAAW+J,EAAY/J,OA9BrG,SAAO+J,EAAaV,GAApB,QAAAzJ,EAAA6B,OAAA,gDACfkB,EAAWiB,GAAMP,uBAAuB0G,GAC9CtC,IAAmB,GACnB9F,IAAMuI,IAAIvH,GAAUwH,MAAK,SAAClE,GACxB,IAAMxH,EAAawH,EAAOnH,KAAI,SAACO,GAAD,OAAWA,EAAM2C,KAAKA,QAChDoH,GAAgB3K,EAAY4K,IAC9BtC,EAAetI,GACf4I,GAAkB0C,EAAYjL,KAC5B,SAACgE,GAAD,MAAW,CAAEjG,WAAYiG,EAAMhG,UAAU,EAAMC,MAAM,OAEvDqK,EAAkBiC,GAClB9B,IAAuB,IAEvBoC,QAEDS,OAAM,SAACjI,GACJA,EAAME,QAAQgI,WAAW,WAC3BzB,GAAa,QAAS,mBAEtBA,GAAa,QAASzG,EAAME,YAE7BiI,SAAQ,WACTnC,GAAuB,IACvBV,IAAmB,MAvBA,qCAkCrB8C,CAAeR,EAAaV,EAAavK,KAAI,SAACgE,GAAD,OAAU0H,SAAS1H,EAAM,QAHpE6G,MAcEc,GAAuB,WAC3BlD,IAAuB,GACvBc,GAAyB,IACzBE,GAAwB,IACxBpB,EAAsB,KAkFlBuD,GAAc,SAACC,GACnB,IACE5B,KACAZ,GAAuBwC,GAjGT,SAACd,GACjB,IACED,GAAaC,GACb,MAAO1H,GACPwH,MA8FAiB,CAAUD,GACV,MAAOxI,GACPyG,GAAa,QAASzG,EAAME,WAIhC,OACE,kBAACwI,EAAA,EAAD,CAAe9G,MAAOA,IACpB,kBAAC+G,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CACEC,KAAMtD,GACNuD,QAASlC,GACTmC,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CC,iBAAkB,KAElB,kBAACC,EAAA,EAAD,CAAOzC,SAAUjB,GAAkBqD,QAASlC,IACzCjB,IAAiB,kBAACyD,EAAA,EAAD,KAAazD,IAC9BE,KAGL,yBAAKwD,IAAKjG,KAAMkG,IAAI,OAAOC,UAAWvM,GAAQoG,OAE9C,kBAACoG,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAS7H,QAAS,GAExC,kBAAC2H,EAAA,EAAD,CAAM/I,MAAI,EAACoD,GAAI,GAAIC,GAAI,GAAIC,IAAE,GAC3B,kBAAC4F,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAY1O,MAAM,SAASkO,UAAWvM,GAAQkG,SAC9C,kBAAC8G,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,SAApB,YAEE,kBAACC,EAAA,EAAD,CAAMC,KAAK,+EAA+EC,OAAO,UAAjG,SAFF,8BAMF,kBAACC,EAAA,EAAD,CACEC,MAAOC,KACPnP,MAAM,uBACNkO,UAAWvM,GAAQwG,cAIzB,kBAACkG,EAAA,EAAD,CAAM/I,MAAI,EAACoD,GAAI,GAAIC,GAAI,GAAIC,IAAE,GAC3B,kBAAC4F,EAAA,EAAD,CAAMN,UAAS,UAAKvM,GAAQ8F,cAAb,YAA8B9F,GAAQiG,YAAc6G,QAAM,GACvE,kBAACC,EAAA,EAAD,CAAY1O,MAAM,SAASkO,UAAWvM,GAAQkG,SAC9C,kBAAC8G,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,SAApB,yBAEF,kBAACI,EAAA,EAAD,CACEC,MAAOE,KACPpP,MAAM,sBACNkO,UAAS,UAAKvM,GAAQwG,UAAb,YAA0BxG,GAAQ0G,iBAIjD,kBAACgG,EAAA,EAAD,CAAM/I,MAAI,EAACoD,GAAI,GAAIC,GAAI,GAAIC,IAAE,GAC3B,kBAAC4F,EAAA,EAAD,CAAMN,UAAS,UAAKvM,GAAQ8F,cAAb,YAA8B9F,GAAQiG,YAAc6G,QAAM,GACvE,kBAACC,EAAA,EAAD,CAAY1O,MAAM,SAASkO,UAAWvM,GAAQkG,SAC9C,kBAAC8G,EAAA,EAAD,CAAaT,UAAS,UAAKvM,GAAQ8F,cAAb,YAA8B9F,GAAQgG,WAC1D,kBAAC0H,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACV,EAAA,EAAD,CAAYC,QAAQ,SAApB,8BAEF,kBAACU,EAAA,EAAD,CACErB,UAAWvM,GAAQgG,SACnB9F,MAAO6I,GACP8E,QAAS,SAACC,GAAD,OAAOvC,GAAYuC,EAAEC,cAAcC,QAAQ,gBACpDC,WAAS,EACTC,UAAQ,EACRhB,QAAQ,WACRiB,WAAS,EACTC,KAAM,GACNC,WAAY,CACV9B,UAAWvM,GAAQiG,YAErBqI,WAAY,CACV/B,UAAWvM,GAAQiG,mBASjC,kBAACsI,EAAA,EAAD,CACE1C,KAAM1D,GACN2D,QAASR,GACTiB,UAAWvM,GAAQuF,gBACnBiJ,kBAAmBC,IACnBC,cAAe,CACbvM,QAAS,KAEXwM,sBAAoB,EACpBC,sBAAoB,GAGpB,kBAACC,EAAA,EAAD,CAAMC,GAAI3G,IACR,kBAAC4G,EAAA,EAAD,CAAOxC,UAAWvM,GAAQ2F,iBACxB,kBAACqJ,EAAA,EAAD,CAAQC,SAAS,SAAS9J,MAAM,UAAU+J,UAAW,GACnD,kBAACC,EAAA,EAAD,KACE,kBAAClC,EAAA,EAAD,CAAYC,QAAQ,KAAKX,UAAWvM,GAAQgG,UAA5C,mBACA,kBAAC5H,EAAA,EAAD,CAASC,MAAM,SACb,kBAACC,EAAA,EAAD,CAAYC,aAAW,QAAQI,QAAS2M,IACtC,kBAAC8D,GAAA,EAAD,UAKR,kBAAC1C,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAM/I,MAAI,EAACoD,GAAI,GAAIC,IAAE,GACnB,kBAACqI,EAAA,EAAD,CAAM9C,UAAWvM,GAAQoF,oBACtBhG,GAAeO,KAAI,SAACgE,GAAU,IACrBjG,EAA+BiG,EAA/BjG,WAAYC,EAAmBgG,EAAnBhG,SAAUC,EAAS+F,EAAT/F,KAC9B,OACE,kBAAC,EAAD,CACEyD,IAAK3D,EACLA,WAAYA,EACZC,SAAUA,EACVC,KAAMA,EACNC,YAAa,kBA1MhB,SAACH,GAClB,IAAM4R,EAAoBlQ,GAAeU,QAAO,SAAC6D,GAAD,OAAUA,EAAKjG,aAAeA,KACxE6R,EAAgB5H,EAAY7H,QAAO,SAAC6D,GAAD,OAAU9E,EAAc8E,EAAK,MAAQjG,KAC9EwK,GAAkBoH,GAClB1H,EAAe2H,GAsMwBC,CAAW9R,UAKtC,kBAACQ,EAAA,EAAD,CAAQuR,MAAI,GACV,kBAACC,EAAA,EAAD,QAGJ,kBAAChD,EAAA,EAAD,CAAM/I,MAAI,EAACoD,GAAI,GAAIC,IAAE,GACnB,kBAAC0G,EAAA,EAAD,CAAKiC,EAAG,EAAGlK,QAAQ,OAAOM,cAAc,UACtC,kBAAC6J,EAAA,EAAD,CACErD,UAAWvM,GAAQ6E,eACnBgL,GAAG,aACHC,QAASjI,EACTkI,YAAa,SAACxN,GAAD,OACX,kBAACqL,EAAA,EAAD,iBAEMrL,EAFN,CAGEyN,MAAM,UACN9C,QAAQ,WACRiB,WAAS,MAGb8B,SAAU,SAACC,EAAQhQ,GACbA,IAAU+I,MA5NH,SAAOlK,GAAP,QAAA0B,EAAA6B,OAAA,mDACxBvD,EADwB,uBAE3BiJ,EAAsB,IAFK,qDAAAvH,EAAA,MAMCgE,GAAMb,iBAAiB7E,IANxB,OAMrBoR,EANqB,OAO3BnI,EAAsBmI,GAPK,kDAS3BnI,EAAsB,IATK,yDA+NXoI,CAAuBlQ,GACvBgJ,IAA0BhJ,GAAS,IAAImQ,eACvCjH,GAAwB,IACpBlJ,GACFqJ,GAAwB+G,QAAQC,UAGpCrQ,MAAO+I,KAET,kBAAC2G,EAAA,EAAD,CACErD,UAAWvM,GAAQ6E,eACnBgL,GAAG,kBACHC,QAAS/H,EACTyI,eAAgB,SAACC,GAAD,OAAYA,GAC5BV,YAAa,SAACxN,GAAD,OACX,kBAACqL,EAAA,EAAD,iBAEMrL,EAFN,CAGEyN,MAAM,gBACN9C,QAAQ,WACRiB,WAAS,EACTuC,SAAUnH,OAGd0G,SAAU,SAACC,EAAQhQ,GACjBkJ,GAAwBlJ,IAE1BA,MAAOiJ,KAET,kBAACuE,EAAA,EAAD,CAAKiD,GAAI,EAAGlL,QAAQ,OAAOD,WAAW,SAASE,eAAe,YAC3D2D,IAAoB,kBAACuH,EAAA,EAAD,CAAkBC,KAAM,GAAKC,KAAKC,KAAK,KAC5D,kBAACC,EAAA,EAAD,CACE7L,MAAM,UACN+H,QAAQ,WACRvO,QApPG,kCAAA8B,EAAA6B,OAAA,mDAChB2G,IAA0BE,GADV,oDAIrBG,IAAoB,GACd5L,EALe,UAKCuL,GALD,YAK0BE,MACzCmG,EAAoBlQ,GAAewB,SACnBX,MAAK,SAAC0D,GAAD,OAAUjG,IAAeiG,EAAKjG,cAPpC,uBAQnB+L,GAAa,OAAD,UAAY/L,EAAZ,kCACZ4L,IAAoB,GATD,sDAAA7I,EAAA,MAcOgE,GAAMX,kBAC9BmF,GAAuBE,KAfN,aAcb8H,EAda,QAiBH3G,MAAMrL,IAjBH,uBAkBX+D,EAAQ,IAAIC,MAAJ,UAAavF,EAAb,gCACRyF,KAAO,YACPH,EApBW,QAsBnBsM,EAAkB4B,KAAK,CACrBxT,aACAC,UAAU,EACVC,MAAM,KAEF2R,EAAgB5H,EAAY/G,SACpBsQ,KAAKD,GACnB/I,GAAkBoH,GAClB1H,EAAe2H,GA9BI,kDAgCA,WAAf,KAAMpM,KACRsG,GAAa,UAAD,UAAe/L,EAAf,mCACY,cAAf,KAAMyF,KACfsG,GAAa,UAAW,KAAMvG,SACrB,KAAMA,QAAQgI,WAAW,WAClCzB,GAAa,QAAS,mBAEtBA,GAAa,QAAS,KAAMvG,SAvCX,yBA0CnBoG,IAAoB,GA1CD,6EAqPHiD,UAAWvM,GAAQsG,WACnB9H,SAAU6K,IALZ,kBAaR,kBAACqG,EAAA,EAAD,MACA,kBAAChC,EAAA,EAAD,CAAKiC,EAAG,GACN,kBAACqB,EAAA,EAAD,CACEH,KAAK,QACL3D,QAAQ,YACR/H,MAAM,UACNgJ,WAAS,EACTxP,QAvNkB,4BAAA8B,EAAA6B,OAAA,uDACxBO,EAAO1D,GAAeC,GAAgBC,EAAgBsI,GAE5DwJ,QAAQC,IAAIvO,GACA,oFAJkB,oBAAApC,EAAA,MAML+B,IAAM6O,KAFnB,oFAE6BxO,EAAM,CAAEV,QAAS,OAN5B,OAMtBS,EANsB,OAO5BuO,QAAQC,IAAIxO,GAPgB,kDAS5BuO,QAAQC,IAAR,MAT4B,0DAwNlB5S,SAAU6K,IANZ,kCAcR,kBAACoF,EAAA,EAAD,CACElC,UAAWvM,GAAQgF,SACnB6G,KAAMxD,IAEN,kBAACuI,EAAA,EAAD,CAAkBzL,MAAM,eCjfhCmM,IAASC,OAAO,kBAAC,GAAD,MAAiBC,SAASC,eAAe,U,mBCJzDC,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,6C","file":"static/js/main.192679b9.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ListItem, ListItemText, ListItemSecondaryAction, IconButton, Tooltip, Hidden,\n} from '@material-ui/core';\nimport { RemoveCircleOutline, Lock, LockOpen } from '@material-ui/icons';\n\nfunction CourseItem(props) {\n  const {\n    courseCode, keepable, keep, onDropClick,\n  } = props;\n\n  return (\n    <ListItem>\n      <ListItemText primary={courseCode} />\n      <ListItemSecondaryAction>\n        {/* TODO: Keep toggle */}\n        <Hidden xsUp={!keepable}>\n          <Tooltip\n            title={keep\n              ? 'This course will be kept unchanged in the schedule.'\n              : 'This course is allowed to be changed'}\n          >\n            <span>\n              <IconButton aria-label=\"keep unchanged\" disabled={!keepable || true}>\n                {/* Remove || true when implementing keepable */}\n                {keep ? <Lock /> : <LockOpen />}\n              </IconButton>\n            </span>\n          </Tooltip>\n        </Hidden>\n        <Tooltip title=\"Drop this course\">\n          <IconButton aria-label=\"drop\" onClick={onDropClick}>\n            <RemoveCircleOutline />\n          </IconButton>\n        </Tooltip>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n}\n\nCourseItem.propTypes = {\n  courseCode: PropTypes.string.isRequired,\n  keepable: PropTypes.bool.isRequired,\n  keep: PropTypes.bool.isRequired,\n  onDropClick: PropTypes.func.isRequired,\n};\n\nexport default CourseItem;\n","import _ from 'lodash';\n\n/**\n * @typedef {{ courseCode: string, keepable: boolean, keep: boolean }} CurrentCourse\n */\n\n/**\n * @typedef {Object} ClassInfo\n * @property {string} subject\n * @property {number} catalog_number\n * @property {number} class_number\n * @property {number} associated_class\n * @property {string} section\n * @property {string} campus\n * @property {ClassTimeInfo[]} classes\n */\n\n/**\n * @typedef {Object} ClassTimeInfo\n * @property {ClassDate} date\n * @property {{building: string, room: string}} location\n * @property {string[]} instructors\n*/\n\n/**\n * @typedef {Object} ClassDate\n * @property {string} start_time\n * @property {string} end_time\n * @property {string} weekdays\n * @property {boolean} is_tba\n * @property {boolean} is_cancelled\n * @property {boolean} is_closed\n */\n\n/**\n * Determines whether two classes are associated.\n * @param {ClassInfo} classInfo1 the ClassInfo object to compare.\n * @param {ClassInfo} classInfo2 the other ClassInfo object to compare.\n */\nconst areAssociated = (classInfo1, classInfo2) => (\n  classInfo1.associated_class === classInfo2.associated_class\n);\n\n/**\n * Returns the course code of a class.\n * @param {ClassInfo} classInfo the ClassInfo object to get course code from.\n */\nconst getCourseCode = (classInfo) => `${classInfo.subject} ${classInfo.catalog_number}`;\n\n/**\n * Determines whether a class in online or not.\n * @param {ClassInfo} classInfo the ClassInfo object to check.\n */\nconst isOnline = (classInfo) => classInfo.campus === 'ONLN ONLINE';\n\n/**\n * Determines whether a class in closed or not.\n * @param {ClassInfo} classInfo the ClassInfo object to check.\n */\nconst isClosed = (classInfo) => classInfo.classes.some((value) => value.date.is_closed);\n\n/**\n * Formats data for use in back-end.\n * @param {CurrentCourse[]} currentCourses the list of current courses.\n * @param {number[]} currentClasses the list of current class numbers.\n * @param {ClassInfo[][]} courseInfo the courses information obtained from API.\n */\nconst formatPostData = (currentCourses, currentClasses, courseInfo) => {\n  const currentCoursesDict = _.keyBy(currentCourses, 'courseCode');\n\n  const filteredCourseInfo = courseInfo.map((course) => {\n    let filtered = course.filter((s) => !isClosed(s) && !isOnline(s));\n    const keepUnchanged = currentCoursesDict[getCourseCode(course[0])].keep;\n    if (keepUnchanged) {\n      filtered = filtered.filter((section) => currentClasses.includes(section.class_number));\n    }\n    const filteredSet = _.uniqWith(filtered, (a, b) => {\n      if (a.associated_class !== b.associated_class) {\n        return false;\n      }\n      if (a.section.slice(0, 3) !== b.section.slice(0, 3)) {\n        return false;\n      }\n      if (a.classes.length !== b.classes.length) {\n        return false;\n      }\n      for (let i = 0; i < a.classes.length; i += 1) {\n        if (!_.isEqual(a.classes[i].date, b.classes[i].date)) {\n          return false;\n        }\n      }\n      return true;\n    });\n    return filteredSet;\n  });\n\n  const grouped = filteredCourseInfo.map((course) => {\n    const dict = _.groupBy(course, (s) => s.section[4]);\n    const groupedSectionList = [];\n    _.forEach(dict, (value, key) => {\n      groupedSectionList[key] = value;\n    });\n    return groupedSectionList;\n  });\n\n  const associatedClassList = grouped.map((course) => {\n    const primary = course[0];\n    const other = course.slice(1);\n    const rearranged = primary.map((primarySection) => {\n      const allowedComponents = other.map((component) => {\n        let allowedSections = component.filter(\n          (section) => areAssociated(primarySection, section),\n        );\n        if (_.isEmpty(allowedSections)) {\n          allowedSections = component.filter((section) => section.associated_class === 99);\n        }\n        return _.map(allowedSections, 'class_number');\n      });\n      return [[primarySection.class_number]].concat(allowedComponents);\n    });\n    return rearranged;\n  });\n\n  return {\n    courses_info: filteredCourseInfo,\n    filtered_courses: associatedClassList,\n  };\n};\n\nexport {\n  areAssociated,\n  formatPostData,\n  getCourseCode,\n  isOnline,\n};\n","import axios from 'axios';\n\nconst rootUrl = 'https://api.uwaterloo.ca/v2';\n\nclass UWAPI {\n  /**\n   * Creates a new UWAPI instance.\n   * @param {string} apiKey the API key.\n   */\n  constructor(apiKey, timeout = 6000) {\n    this.apiKey = apiKey;\n    this.timeout = timeout;\n  }\n\n  /**\n   * Sends a GET request to UW Open Data API.\n   * @param {string} url the URL of the endpoint.\n   * @param {Object} params parameters to send along the request.\n   */\n  sendUrlRequest = async (url, params = {}) => {\n    const response = await axios.get(url, {\n      baseURL: rootUrl,\n      params: {\n        ...params,\n        key: this.apiKey,\n      },\n      timeout: this.timeout,\n      timeoutErrorMessage: `timeout ${this.timeout}`,\n    });\n    const { meta, data } = response.data;\n    if (meta.status !== 200) {\n      const error = Error(meta.message);\n      error.name = `UW ${meta.status}`;\n      throw error;\n    }\n    return data;\n  }\n\n  /**\n   * Sends multiple GET requests to UW Open Data API.\n   * @param {string[]} urlList the URLs of the endpoints.\n   * @param {Object} params parameters to send along each request.\n   */\n  sendBulkUrlRequest = (urlList, params = {}) => {\n    const instance = axios.create({\n      baseURL: rootUrl,\n      timeout: this.timeout,\n      timeoutErrorMessage: `timeout ${this.timeout}`,\n    });\n    const promises = urlList.map((url) => instance.get(url, {\n      params: {\n        ...params,\n        key: this.apiKey,\n      },\n    }));\n    return promises;\n  }\n\n  /**\n   * Returns all available subject codes.\n   */\n  getSubjectCodes = async () => {\n    const subjects = await this.sendUrlRequest('/codes/subjects.json');\n    return subjects.map((item) => item.subject);\n  }\n\n  /**\n   * Returns all available catalog numbers (course numbers) for a subject.\n   * @param {string} subject\n   */\n  getCourseNumbers = async (subject) => {\n    const courses = await this.sendUrlRequest(`/courses/${subject}.json`);\n    return courses.map((item) => item.catalog_number);\n  }\n\n  /**\n   * Returns the schedule of a course.\n   * @param {string} subject\n   * @param {string | number} catalogNumber\n   * @param {number} term the term to get schedules for.\n   */\n  getCourseSchedule = async (subject, catalogNumber, term = undefined) => {\n    const url = `/courses/${subject}/${catalogNumber}/schedule.json`;\n    const classes = await this.sendUrlRequest(url, { term });\n    return classes;\n  }\n\n  /**\n   * Returns the schedules of multiple courses.\n   * @param {string[]} courseCodeList the list of courses to get schedules for.\n   * @param {number} term the term to get schedules for.\n   */\n  getCourseScheduleMulti = (courseCodeList, term = undefined) => {\n    const urlList = courseCodeList.map((code) => {\n      const [sub, cata] = code.split(' ');\n      return `/courses/${sub}/${cata}/schedule.json`;\n    });\n    return this.sendBulkUrlRequest(urlList, { term });\n  }\n}\n\nexport default UWAPI;\n","import React, { useState, useEffect, useRef } from 'react';\nimport {\n  Button, TextField, Typography, Grid, Modal, Link, List,\n  Card, CardContent, CardHeader, CardMedia, Paper, CssBaseline,\n  Divider, Snackbar, Fade, Backdrop, createMuiTheme, ThemeProvider,\n  Box, CircularProgress, Container, makeStyles, Hidden, IconButton, AppBar, Toolbar, Tooltip,\n} from '@material-ui/core';\nimport { Autocomplete, Alert, AlertTitle } from '@material-ui/lab';\nimport { blue } from '@material-ui/core/colors';\nimport axios from 'axios';\nimport CourseItem from 'components/CourseItem';\nimport { getCourseCode, formatPostData, isOnline } from 'utils/courses';\nimport UWAPI from 'utils/uwapi';\nimport logo from 'res/icon.svg';\nimport step1 from 'res/calendar-step-1.png';\nimport step2 from 'res/calendar-step-2.png';\nimport _ from 'lodash';\nimport { Close } from '@material-ui/icons';\n\nconst apiKey = '4ad350333dc3859b91bcf443d14e4bf0';\nconst uwapi = new UWAPI(apiKey);\n// TODO: terms\n\nconst useStyles = makeStyles((theme) => ({\n  addCourseInput: {\n    marginBottom: theme.spacing(2),\n  },\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#ffffff',\n  },\n  currentCoursesList: {\n    overflowY: 'scroll',\n    height: 360,\n  },\n  editCourseModal: {\n    alignItems: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  editCoursePaper: {\n    outline: 'none',\n    width: 800,\n  },\n  flexContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  flexGrow: {\n    flexGrow: 1,\n  },\n  fullHeight: { height: '100%' },\n  header: { background: '#f5f5f5' },\n  logo: {\n    display: 'block',\n    height: '16vmin',\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n    marginLeft: 'auto',\n    marginRight: 'auto',\n  },\n  marginLeft: { marginLeft: theme.spacing(2) },\n  stepImage: { height: 0, paddingTop: '100%' },\n  stickBottom: { marginTop: 'auto' },\n  stickRight: { marginLeft: 'auto' },\n}));\n\nconst theme = createMuiTheme({\n  breakpoints: {\n    values: {\n      xs: 0,\n      sm: 600,\n      md: 1024,\n      lg: 1440,\n      xl: 1920,\n    },\n  },\n  palette: {\n    primary: {\n      main: blue[500],\n      light: '#6ec6ff',\n      dark: '#0069c0',\n    },\n  },\n});\n\nfunction WelcomePage() {\n  // Data states\n  const [coursesInfo, setCoursesInfo] = useState([]); // courseInfo\n  const [availSubjects, setAvailSubjects] = useState([]); // allSubjects\n  const [availCourseNumbers, setAvailCourseNumbers] = useState([]); // courseNumbers\n  const [currentClasses, setCurrentClasses] = useState([]);\n  const [currentCourses, setCurrentCourses] = useState([]);\n\n  // UI states\n  const [editCourseModalOpen, setEditCourseModalOpen] = useState(false); // modalShow\n  const [fullPageLoading, setFullPageLoading] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarSeverity, setSnackbarSeverity] = useState(''); // snackbarTheme\n  const [snackbarTitle, setSnackbarTitle] = useState('');\n  const [snackbarText, setSnackbarText] = useState('');\n  const [scheduleImportInput, setScheduleImportInput] = useState(''); // rawCourses\n  const [addCourseSubjectInput, setAddCourseSubjectInput] = useState(''); // subjectBox\n  const [addCourseNumberInput, setAddCourseNumberInput] = useState(''); // courseNumberBox\n  const [addCourseLoading, setAddCourseLoading] = useState(false);\n\n  // Refs\n  const addCourseNumberInputRef = useRef(); // courseNumberBoxRef\n\n  // Material UI styles\n  const classes = useStyles();\n\n  const showSnackbar = (severity, text, title) => {\n    setSnackbarSeverity(severity);\n    setSnackbarText(text);\n    setSnackbarTitle(title || '');\n    setSnackbarOpen(true);\n  };\n\n  const hideSnackbar = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setSnackbarOpen(false);\n  };\n\n  useEffect( // componentDidMount()\n    () => {\n      const loadAvailSubjects = async () => {\n        try {\n          const subjects = await uwapi.getSubjectCodes();\n          setAvailSubjects(subjects);\n        } catch (error) {\n          showSnackbar('error', 'Unable to load courses.');\n        }\n      };\n      loadAvailSubjects();\n    },\n    [],\n  );\n\n  const isValidSchedule = (courseInfo, classNumbers) => {\n    const completeClassNumbers = _.flatten(courseInfo).map((obj) => obj.class_number);\n    return classNumbers.every((number) => completeClassNumbers.includes(number));\n  };\n\n\n  const showScheduleInvalidAlert = () => {\n    showSnackbar(\n      'warning',\n      'Please make sure it\\'s correct and try again.',\n      'Your course info cannot be read',\n    );\n  };\n\n  const loadCourseInfo = async (courseNames, classNumbers) => {\n    const promises = uwapi.getCourseScheduleMulti(courseNames);\n    setFullPageLoading(true);\n    axios.all(promises).then((values) => {\n      const courseInfo = values.map((value) => value.data.data);\n      if (isValidSchedule(courseInfo, classNumbers)) {\n        setCoursesInfo(courseInfo);\n        setCurrentCourses(courseNames.map(\n          (item) => ({ courseCode: item, keepable: true, keep: true }),\n        ));\n        setCurrentClasses(classNumbers);\n        setEditCourseModalOpen(true);\n      } else {\n        showScheduleInvalidAlert();\n      }\n    }).catch((error) => {\n      if (error.message.startsWith('timeout')) {\n        showSnackbar('error', 'Network Timeout');\n      } else {\n        showSnackbar('error', error.message);\n      }\n    }).finally(() => {\n      setScheduleImportInput('');\n      setFullPageLoading(false);\n    });\n  };\n\n  const parseCourses = (rawCourses) => {\n    const classNumbers = rawCourses.match(/^\\d{4}$/gm);\n    const courseNames = rawCourses.match(/[A-Z]{2,6} \\d{1,3}[A-Z]? - /g).map((x) => x.substring(0, x.length - 3));\n    if (rawCourses.match(/^\\d{3}$/gm).length !== classNumbers.length || rawCourses.match(/^0\\d{2}$/gm).length !== courseNames.length) {\n      showScheduleInvalidAlert();\n      return;\n    }\n    loadCourseInfo(courseNames, classNumbers.map((item) => parseInt(item, 10)));\n  };\n\n  const showModal = (rawCourses) => {\n    try {\n      parseCourses(rawCourses);\n    } catch (error) {\n      showScheduleInvalidAlert();\n    }\n  };\n\n  const closeEditCourseModal = () => {\n    setEditCourseModalOpen(false);\n    setAddCourseSubjectInput('');\n    setAddCourseNumberInput('');\n    setAvailCourseNumbers([]);\n  };\n\n  const dropCourse = (courseCode) => {\n    const newCurrentCourses = currentCourses.filter((item) => item.courseCode !== courseCode);\n    const newCourseInfo = coursesInfo.filter((item) => getCourseCode(item[0]) !== courseCode);\n    setCurrentCourses(newCurrentCourses);\n    setCoursesInfo(newCourseInfo);\n  };\n\n  const loadAvailCourseNumbers = async (subject) => { // TODO: migrate to useEffect()\n    if (!subject) {\n      setAvailCourseNumbers([]);\n      return;\n    }\n    try {\n      const courseNumbers = await uwapi.getCourseNumbers(subject);\n      setAvailCourseNumbers(courseNumbers);\n    } catch (error) {\n      setAvailCourseNumbers([]);\n    }\n  };\n\n  const handleAddClick = async () => {\n    if (!addCourseSubjectInput || !addCourseNumberInput) {\n      return;\n    }\n    setAddCourseLoading(true);\n    const courseCode = `${addCourseSubjectInput} ${addCourseNumberInput}`;\n    const newCurrentCourses = currentCourses.slice();\n    if (newCurrentCourses.some((item) => courseCode === item.courseCode)) {\n      showSnackbar('info', `${courseCode} is already in your schedule.`);\n      setAddCourseLoading(false);\n      return;\n    }\n\n    try {\n      const classesInfo = await uwapi.getCourseSchedule(\n        addCourseSubjectInput, addCourseNumberInput,\n      );\n      if (classesInfo.every(isOnline)) {\n        const error = new Error(`${courseCode} is only available online.`);\n        error.name = 'UW online';\n        throw error;\n      }\n      newCurrentCourses.push({\n        courseCode,\n        keepable: false,\n        keep: false,\n      });\n      const newCourseInfo = coursesInfo.slice();\n      newCourseInfo.push(classesInfo);\n      setCurrentCourses(newCurrentCourses);\n      setCoursesInfo(newCourseInfo);\n    } catch (error) {\n      if (error.name === 'UW 204') {\n        showSnackbar('warning', `${courseCode} is unavailable for this term.`);\n      } else if (error.name === 'UW online') {\n        showSnackbar('warning', error.message);\n      } else if (error.message.startsWith('timeout')) {\n        showSnackbar('error', 'Network Timeout');\n      } else {\n        showSnackbar('error', error.message);\n      }\n    } finally {\n      setAddCourseLoading(false);\n    }\n  };\n\n  const handleViewScheduleClick = async () => {\n    const data = formatPostData(currentCourses, currentClasses, coursesInfo);\n    // eslint-disable-next-line no-console\n    console.log(data); // TODO: pass data to back-end\n    const url = 'https://qemn8c6rx9.execute-api.us-east-2.amazonaws.com/test/handleschedulerequest';\n    try {\n      const response = await axios.post(url, data, { timeout: 100000 });\n      console.log(response);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handlePaste = (pasteText) => {\n    try {\n      hideSnackbar();\n      setScheduleImportInput(pasteText);\n      showModal(pasteText);\n    } catch (error) {\n      showSnackbar('error', error.message);\n    }\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Snackbar\n        open={snackbarOpen}\n        onClose={hideSnackbar}\n        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n        autoHideDuration={3000}\n      >\n        <Alert severity={snackbarSeverity} onClose={hideSnackbar}>\n          {snackbarTitle && <AlertTitle>{snackbarTitle}</AlertTitle>}\n          {snackbarText}\n        </Alert>\n      </Snackbar>\n      <img src={logo} alt=\"Logo\" className={classes.logo} />\n\n      <Container maxWidth=\"lg\">\n        <Grid container justify=\"center\" spacing={4}>\n          {/* TODO: change spacing to 6 for md and higher, or leave it 4 */}\n          <Grid item xs={12} sm={10} md>\n            <Card raised>\n              <CardHeader title=\"Step 1\" className={classes.header} />\n              <CardContent>\n                <Typography variant=\"body1\">\n                  Go to&nbsp;\n                  <Link href=\"https://quest.pecs.uwaterloo.ca/psp/SS/ACADEMIC/SA/?cmd=login&languageCd=ENG\" target=\"_blank\">Quest</Link>\n                  , click &quot;Class Schedule&quot;.\n                </Typography>\n              </CardContent>\n              <CardMedia\n                image={step1}\n                title=\"Go to Class Schedule\"\n                className={classes.stepImage}\n              />\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={10} md>\n            <Card className={`${classes.flexContainer} ${classes.fullHeight}`} raised>\n              <CardHeader title=\"Step 2\" className={classes.header} />\n              <CardContent>\n                <Typography variant=\"body1\">Select all and copy.</Typography>\n              </CardContent>\n              <CardMedia\n                image={step2}\n                title=\"Select All and Copy\"\n                className={`${classes.stepImage} ${classes.stickBottom}`}\n              />\n            </Card>\n          </Grid>\n          <Grid item xs={12} sm={10} md>\n            <Card className={`${classes.flexContainer} ${classes.fullHeight}`} raised>\n              <CardHeader title=\"Step 3\" className={classes.header} />\n              <CardContent className={`${classes.flexContainer} ${classes.flexGrow}`}>\n                <Box mb={2}>\n                  <Typography variant=\"body1\">Paste into the box below.</Typography>\n                </Box>\n                <TextField\n                  className={classes.flexGrow}\n                  value={scheduleImportInput}\n                  onPaste={(e) => handlePaste(e.clipboardData.getData('text/plain'))}\n                  multiline\n                  required\n                  variant=\"outlined\"\n                  fullWidth\n                  rows={12}\n                  InputProps={{\n                    className: classes.fullHeight,\n                  }}\n                  inputProps={{\n                    className: classes.fullHeight,\n                  }}\n                />\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Container>\n\n      <Modal\n        open={editCourseModalOpen}\n        onClose={closeEditCourseModal}\n        className={classes.editCourseModal}\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n        closeAfterTransition\n        disableBackdropClick\n      >\n        {/* TODO: disable clickaway, add X button at top-right corner */}\n        <Fade in={editCourseModalOpen}>\n          <Paper className={classes.editCoursePaper}>\n            <AppBar position=\"static\" color=\"default\" elevation={0}>\n              <Toolbar>\n                <Typography variant=\"h6\" className={classes.flexGrow}>Edit my courses</Typography>\n                <Tooltip title=\"Close\">\n                  <IconButton aria-label=\"close\" onClick={closeEditCourseModal}>\n                    <Close />\n                  </IconButton>\n                </Tooltip>\n              </Toolbar>\n            </AppBar>\n            <Grid container>\n              <Grid item xs={12} sm>\n                <List className={classes.currentCoursesList}>\n                  {currentCourses.map((item) => {\n                    const { courseCode, keepable, keep } = item;\n                    return (\n                      <CourseItem\n                        key={courseCode}\n                        courseCode={courseCode}\n                        keepable={keepable}\n                        keep={keep}\n                        onDropClick={() => dropCourse(courseCode)}\n                      />\n                    );\n                  })}\n                </List>\n                <Hidden smUp>\n                  <Divider />\n                </Hidden>\n              </Grid>\n              <Grid item xs={12} sm>\n                <Box p={2} display=\"flex\" flexDirection=\"column\">\n                  <Autocomplete\n                    className={classes.addCourseInput}\n                    id=\"subjectBox\"\n                    options={availSubjects}\n                    renderInput={(params) => (\n                      <TextField\n                        // eslint-disable-next-line react/jsx-props-no-spreading\n                        {...params}\n                        label=\"Subject\"\n                        variant=\"outlined\"\n                        fullWidth\n                      />\n                    )}\n                    onChange={(_event, value) => {\n                      if (value === addCourseSubjectInput) {\n                        return;\n                      }\n                      loadAvailCourseNumbers(value);\n                      setAddCourseSubjectInput((value || '').toUpperCase());\n                      setAddCourseNumberInput('');\n                      if (value) {\n                        addCourseNumberInputRef.current.focus();\n                      }\n                    }}\n                    value={addCourseSubjectInput}\n                  />\n                  <Autocomplete\n                    className={classes.addCourseInput}\n                    id=\"courseNumberBox\"\n                    options={availCourseNumbers}\n                    getOptionLabel={(option) => option}\n                    renderInput={(params) => (\n                      <TextField\n                        // eslint-disable-next-line react/jsx-props-no-spreading\n                        {...params}\n                        label=\"Course number\"\n                        variant=\"outlined\"\n                        fullWidth\n                        inputRef={addCourseNumberInputRef}\n                      />\n                    )}\n                    onChange={(_event, value) => {\n                      setAddCourseNumberInput(value);\n                    }}\n                    value={addCourseNumberInput}\n                  />\n                  <Box mx={0} display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\">\n                    {addCourseLoading && <CircularProgress size={36 / Math.sqrt(2)} />}\n                    <Button\n                      color=\"primary\"\n                      variant=\"outlined\"\n                      onClick={handleAddClick}\n                      className={classes.marginLeft}\n                      disabled={addCourseLoading}\n                    >\n                      Add Course\n                    </Button>\n                  </Box>\n                </Box>\n              </Grid>\n            </Grid>\n            <Divider />\n            <Box p={2}>\n              <Button\n                size=\"large\"\n                variant=\"contained\"\n                color=\"primary\"\n                fullWidth\n                onClick={handleViewScheduleClick}\n                disabled={addCourseLoading}\n              >\n                View Recommended Schedules\n              </Button>\n            </Box>\n          </Paper>\n        </Fade>\n      </Modal>\n      <Backdrop\n        className={classes.backdrop}\n        open={fullPageLoading}\n      >\n        <CircularProgress color=\"inherit\" />\n      </Backdrop>\n    </ThemeProvider>\n  );\n}\n\nexport default WelcomePage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport WelcomePage from './welcome_page/index';\n\nReactDOM.render(<WelcomePage />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/icon.47f3ae83.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar-step-1.5a0cc442.png\";","module.exports = __webpack_public_path__ + \"static/media/calendar-step-2.514203ac.png\";"],"sourceRoot":""}